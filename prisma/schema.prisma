datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  myDoodles     Doodle[]
  permissions   Permissions[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([identifier, token])
}

model Doodle {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String        @default("New Doodle")
  authorId    String        @db.ObjectId
  siteUrl     String
  siteHash    String
  data        Json
  isPublic    Boolean       @default(false)
  forHunt     Boolean       @default(false)
  permissions Permissions[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([authorId, siteHash])
}

model Permissions {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  operation Operation @default(VIEW)
  userId    String    @db.ObjectId
  doodleId  String    @db.ObjectId

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  doodle Doodle @relation(fields: [doodleId], references: [id], onDelete: Cascade)

  @@unique([userId, doodleId])
}

enum Operation {
  VIEW
  EDIT
}
